Реализовать класс Counter, описывающий цифровой счетчик. Одним из полей этого класса будет переменная с ограниченным диапазоном,
значение которой сбрасывается, если её целочисленное значение достигает определённого максимума (например, переменная current
может принимать значения в диапазоне от 0 до 99999). В качестве реального примера такого счётчика представьте счётчик километража
в автомобиле, или же домашний счётчик по учёту расхода воды или электроэнергии. Обязательные поля: текущее значение счётчика,
максимальное значение диапазона, минимальное значение диапазона, шаг прироста. Обязательные методы: конструктор по умолчанию, 
несколько видов конструкторов с параметрами, увеличение текущего значения счётчика на 1, увеличение значения на заданную
величину (шаг прироста), сброс (обнуление) счётчика, установка минимального и максимального значений.

#include "iostream"

using namespace std;

/*
Класс  счетчик;
Максимальное, минимальное значение, шаг прироста, значение.
*/

class counter
{
	int count;  // состояние
	int max;	// максимальное значение
	int min;	// минимальное значение
	int step;	// шаг прироста
public:

	counter()
	{
		count = 0;
		max = 99999; 
		min = 0;
		step = 1; 
	}
	counter(int max, int min) 
	{
		this->max = max;
		this->min = min;
	}
	counter(int max, int min, int count) : counter(max, min)
	{
		this->count = count;
	}
	counter(int max, int min, int count, int step) : counter(max, min, count)
	{
		this->step = step;
	}
	void info()
	{
		cout << "Max - " << max << endl;
		cout << "Min - " << min << endl;
		cout << "Count - " << count << endl;
		cout << "Step - " << step << endl << endl;
	}
	void counter_plus_step()
	{
		if (count + step > max)
			count = min;
		else
			count += step;
	}
	void counter_plus_one()
	{
		if (count + 1 > max)
			count = min;
		else
			count ++;
	}
	void set_max(int val)
	{
		if (val < count)
			count = val;
		max = val;
	}
	void set_min(int val)
	{
		if (val > count)
			count = val;
		min = val;
	}
	void set_step(int val)
	{
		step = val;
	}
	void set_counter(int val)
	{
		count = val;
	}
	void reset()
	{
		count = min;
	}
	int get_max()
	{
		return max;
	}
	int get_min()
	{
		return min;
	}
	int get_counter()
	{
		return count;
	}
	int get_step()
	{
		return step;
	}
	~counter()
	{
	}
};

void main()
{
	counter a;
	a.info();
	a.counter_plus_step();
	a.info();
	a.set_counter(100);
	a.set_step (5);
	a.info();
	a.counter_plus_step();
	a.info();
	a.reset();
	a.info();
	a.set_max(150);
	a.set_min(10);
	cout << "Step - " << a.get_step() << endl << "Count - " << a.get_counter() << endl << "MAx - " << a.get_max() << endl << "Min - " << a.get_min() << endl;


}
