#include "iostream"
#include "time.h"

using namespace std;

char* month(int m)
{
	char* dat;
	switch (m)
	{
	case 1:
		dat = "Январь";
		break;
	case 2:
		dat = "Февраль";
		break;
	case 3:
		dat = "Март";
		break;
	case 4:
		dat = "Апрель";
		break;
	case 5:
		dat = "Май";
		break;
	case 6:
		dat = "Июнь";
		break;
	case 7:
		dat = "Июль";
		break;
	case 8:
		dat = "Август";
		break;
	case 9:
		dat = "Сентабрь";
		break;
	case 10:
		dat = "Октябрь";
		break;
	case 11:
		dat = "Ноябрь";
		break;
	case 12:
		dat = "Декабрь";
		break;
	default:
		dat = "Не известно";
	}
	return dat;
}

struct data_time
{
	int year;
	char* month;
	int day;
	int hour: 5;
	int minutes: 6;
	int second :6 ;
};
class adress_c
{
	char* gorod;
	char* street;
	int hause;
	int kv;
public:
	adress_c()
	{
		gorod = "No name";
		street = "No name";
		hause = 0;
		kv = 0;
	}
	// делегирование  присутствует
	adress_c(char* gor) : adress_c(gorod, "No name", 0, 0){}
	adress_c(char* gor, char* str) : adress_c(gorod, street, 0, 0){}
	adress_c(char* gor, char* str, int hause) : adress_c(gor, str, hause, 0){}
	adress_c(char* gor, char* str, int hause, int kv)
	{
		gorod = gor;
		street = str;
		hause = hause;
		kv = kv;
	}
	~adress_c()	{	}
	void set_gorod(char* gorod)
	{
		this->gorod = gorod;
	}
	void set_street(char* street)
	{
		this->street = street;
	}
	void set_hause(int hause)
	{
		this->hause = hause;
	}
	void set_kv(int kv)
	{
		this->kv = kv;
	}
	char* get_gorod()
	{
		return gorod;
	}
	char* get_street()
	{
		return street;
	}
	int get_hause()
	{
		return hause;
	}
	int get_kv()
	{
		return kv;
	}
	void print()
	{
		cout << "Город  - " << gorod << endl;
		cout << "Улица  - " << street << endl;
		cout << "Дом  - " << hause << endl;
		cout << "Кв  - " << kv << endl;
	}
};
class student
{
	char* first_name;
	char* family;
	char* second_name;
	data_time* data_roj;
	char* tel;
	adress_c adress;
	int* zachet;
	int kol_zah;
	int* kursovie;
	int kol_kurs;
	int* ekzameni;
	int kol_ekz;
	char* status;

public:
	student() 
	{
		first_name = new char[strlen("Аноним")+1];
		strcpy_s(first_name, strlen("Аноним") + 1, "Аноним");
		
		family = new char[strlen("Аноним") + 1];
		strcpy_s(family, strlen("Аноним") + 1, "Аноним");

		second_name = new char[strlen("Аноним") + 1];
		strcpy_s(second_name, strlen("Аноним") + 1, "Аноним");

		data_roj = new data_time;
		data_roj->year = rand() % (2000 - 1980) + 1980;
		data_roj->month = month( rand() % 12);
		data_roj->day = rand() % 30;
		data_roj->hour = 0;
		data_roj->minutes = 0;
		data_roj->second = 0;
			
		tel = new char[strlen("(000)-000-00-00") + 1];
		strcpy_s(tel, strlen("(000)-000-00-00") + 1, "(000)-000-00-00");

	    adress.set_gorod("Одесса");
		adress.set_hause(45);
		adress.set_kv(5);
		adress.set_street("Затонского");
	
		status = new char[strlen("Учится") + 1];
		strcpy_s(status, strlen("Учится") + 1, "Учится");

		int val_1 = rand() % 7;
		zachet = new int[val_1];
		for (int i = 0; i < val_1; i++)
			zachet[i] = rand() % 5;
		kol_zah = val_1;

		val_1 = rand() % 5;
		kursovie = new int[val_1];
		for (int i = 0; i < val_1; i++)
			kursovie[i] = rand() % 5;
		kol_kurs = val_1;

		val_1 = rand() % 7;
		ekzameni = new int[val_1];
		for (int i = 0; i < val_1; i++)
			ekzameni[i] = rand() % 5;
		kol_ekz = val_1;		
	}

	// делегирование  присутствует
	student(char* name) : student(name, "Аноним", "Аноним", rand() % 2000, rand() % 12, rand() % 30, "(000)-000-00-00", "---"){}
	student(char* name, char* famil) : student(name, famil, "Аноним", rand() % ( 2000 - 1980) + 1980, rand() % 12, 0, "(000)-000-00-00", "---"){}
	student(char* name, char* famil, char* sec_nam) : student(name, famil, sec_nam, rand() % 2000, rand() % 12, rand() % 30, "(000)-000-00-00", "---"){}
	student(char* name, char* famil, char* sec_nam, int Y,int M, int D, char* tel, char* adr)
	{
		first_name = name;
		family = famil;
		second_name = sec_nam;
		data_roj->year = Y;
		data_roj->month = month(M);
		data_roj->day = D;
		this->tel = tel;
		adress.set_gorod(adr);
		zachet = new int[5];
		for (int i = 0; i < 5; i++)
			zachet[i] = rand() % 5;
		kursovie = new int[5];
		for (int i = 0; i < 5; i++)
			kursovie[i] = rand() % 5;
		ekzameni = new int[5];
		for (int i = 0; i < 5; i++)
			ekzameni[i] = rand() % 5;
		kol_ekz = 5;
		kol_kurs = 5;
		kol_zah = 5;
		status = new char[strlen("Учится") + 1];
		strcpy_s(status, strlen("Учится") + 1, "Учится");
	}
	student(const student & stud)
	{
		first_name = stud.first_name;
		family = stud.family;
		second_name = stud.second_name;
		data_roj = stud.data_roj;
		tel = stud.tel;
		adress = stud.adress;

		if (stud.zachet)
		{
			zachet = new int[stud.kol_zah];
			for (int i = 0; i < stud.kol_zah; i++)
				zachet[i] = stud.zachet[i];
			kol_zah = 4;
		}
		if (stud.kursovie)
		{
			kursovie = new int[stud.kol_kurs];
			for (int i = 0; i < stud.kol_kurs; i++)
				kursovie[i] = stud.kursovie[i];
			kol_kurs = 6;
		}
		if (stud.ekzameni)
		{
			ekzameni = new int[stud.kol_ekz ];
			for (int i = 0; i < stud.kol_ekz; i++)
				ekzameni[i] = stud.ekzameni[i]; 
			kol_ekz = 6;
		}
	}
	void print()
	{
		cout << endl;
		cout << "Фамилия \t" << family << endl;
		cout << "Имя \t\t" << first_name << endl;
		cout << "Отчетво \t" << second_name << endl;
		cout << "Дата рождения:" << endl;
		cout << "\t:" << data_roj->year << endl;
		cout << "\t:" << data_roj->month << endl;
		cout << "\t:" << data_roj->day << endl;
		cout << "Тел. \t\t" << tel << endl;
		cout << "Адресс " << endl;
		adress.print();
		cout << "Статус \t\t" << status << endl;

		if (kol_zah == 0)
			cout << "Зачеты \t\t" << "Net" << endl;
		else
		{
			cout << "Зачеты \t\t";
			for (int i = 0; i < kol_zah; i++)
				cout << zachet[i] << ", ";
			cout << endl;
		}
		if (kol_kurs == 0)
			cout << "Курсовые \t" << "Net" << endl;
		else
		{
			cout << "Курсовые \t";
			for (int i = 0; i < kol_kurs; i++)
				cout << kursovie[i] << ", ";
			cout << endl;
		}if (kol_ekz == 0)
			cout << "Экзамены \t" << "Net" << endl;
		else
		{
			cout << "Экзамены \t";
			for (int i = 0; i < kol_ekz; i++)
				cout << ekzameni[i] << ", ";
			cout << endl;
		}
		
		cout << endl;
	}
	void add_zachet(int* val, int kol)
	{	
		int* temp = new int[kol_zah + kol];
		int i = 0;
		for (; i < kol_zah; i++)
			temp[i] = zachet[i];
		
		cout << endl;
		for (int g = 0; i < kol_zah + kol; i++, g++)
			temp[i] = val[g];

		kol_zah += kol;
		
		zachet = temp;
		temp = nullptr;
		delete[] temp;
	}
	void add_ekzamen(int* val, int kol)
	{
		int* temp = new int[kol_ekz + 1];
		int i = 0;
		for (; i < kol_zah; i++)
			temp[i] = ekzameni[i];
		for (int g = 0; i < kol_zah+kol; i++, g++)
			temp[i] = val[g];
		kol_ekz += kol;

		zachet = temp;
		temp = nullptr;
		delete[] temp;		
	}
	void add_kursovoy(int* val, int kol)
	{
		int* temp = new int[kol_kurs + 1];
		int i = 0;
		for (; i < kol_kurs; i++)
			temp[i] = kursovie[i];
		for (int g = 0; i < kol_kurs + kol; i++, g++)
			temp[i] = val[g];
		kol_kurs += kol;

		zachet = temp;
		temp = nullptr;
		delete[] temp;
	}
	int get_zachet()
	{
		int val = 0;
		for (int i = 0; i < kol_zah; i++)
			val += zachet[i];
		return val;
	}
	int get_ekzamen()
	{
		int val;
		for (int i = 0; i < kol_ekz; i++)
			val += ekzameni[i];
		return val;
	}
	int get_kursovoy()
	{
		int val;
		for (int i = 0; i < kol_kurs; i++)
			val += kursovie[i];
		return val;
	}
	void set_first_name(char * name)
	{
		first_name = name;
	}
	void set_family(char * fam)
	{
		family = fam;
	}
	void set_second_name(char * sec_nam)
	{
		second_name = sec_nam;
	}
	void set_tel(char * tel)
	{
		this->tel = tel;
	}
	void set_ardess(char * ard)
	{
		adress.set_gorod(ard);
	}
	void set_date(int g, int m, int d, int h, int min, int s)
	{
		data_roj->year = g ;
		data_roj->month  = month(m);
		data_roj->day = d;
		data_roj->hour = h;
		data_roj->minutes = min;
		data_roj->second = s;
	}
	void set_stat(char * stat)
	{
		status = stat;
	}
	char* get_first_name()
	{
		return first_name;
	}
	char* get_family()
	{
		return family;
	}
	char* get_second_name()
	{
		return second_name ;
	}
	char* get_tel()
	{
		return tel;
	}
	char* get_ardess()
	{
		adress.print();
	}
	data_time* get_date()
	{
		cout << "Дата рождения:" << endl;
		cout << "\t:" << data_roj->year  << endl;
		cout << "\t:" << data_roj->month << endl;
		cout << "\t:" << data_roj->day << endl;
	}
	~student()
	{
		//cout << "Des-tor stud" << endl;
		delete[]zachet;
		delete[]tel;
		delete[]kursovie;
		delete[]ekzameni;
		delete[]data_roj;
		delete[]status;


		delete[] first_name;
		delete[] family;
		delete[] second_name;
		

	
	}
};

char* fam[9] = { "Иванов", "Петров", "Сидоров", "Шевченко", "Иващенко", "Смирнов", "Каретников", "Сананов", "Селизнев" };
char* imena[9] = { "Петя", "Вася", "Коля", "Игорь", "Сережа", "Вадим", "Сергей", "Дима", "Федя" };
char* adr[9] = { "Киев", "Одесса", "Хмельницк", "Поатава", "Харьков", "Севастополь", "Херсон", "Алушта", "Южный" };
char* tel[9] = { "098-565-65-56", "059-857-56-98", "111-222-33-44", "99-88-777-333", "578-895-55-66", "321-353-94-23", "11-11-111-111", "222-222-22-22", "333-333-33-33" };
char* spec[4] = { "Программисты", "Дизайнеры", "Архитекторы", "Ученые" };

class group
{
	student** arr;
	unsigned  kol_vo_stud;
	char* name_group;
	unsigned  nomer_kursa;
	char* specializaciya;
public:
	
	group()
	{
		kol_vo_stud = 0;
		name_group = new char[strlen("Нет имени" + 1)];
		strcpy_s(name_group, strlen("Нет имени") + 1, "Нет имени");
		nomer_kursa = 0;
		specializaciya = new char[strlen("Нет имени" + 1)];
		strcpy_s(specializaciya, strlen("Нет имени") + 1, "Нет имени");
		arr = nullptr;
	}
	group(int kol)
	{
		kol_vo_stud = kol;
		arr = new student*[kol_vo_stud];
		for (int i = 0; i < kol_vo_stud; i++)
		{
			arr[i] = new student;
			arr[i]->set_family(fam[rand() % 9]);
			arr[i]->set_first_name(imena[rand() % 9]);
			arr[i]->set_date(rand() % (2000 - 1980) + 1980, rand() % 12, rand() % 30, 0, 0, 0);
			arr[i]->set_ardess(adr[rand() % 9]);
			arr[i]->set_tel (tel[rand() % 9]);
		}
		name_group = "Нет имени";
		//cout << "Укажите номер курса - ";
		//cin >> nomer_kursa;
		nomer_kursa = 1;
		specializaciya = new char[strlen("Нет имени" + 1)];
		group::set_cpec(spec[rand() % 4]);
	}
	group(const group & grup)
	{
		// не совсем понял как тут можно применить делигирование
		this->kol_vo_stud = grup.kol_vo_stud;
		this->arr = nullptr;
		if (grup.kol_vo_stud > 0)
		{
			this->arr = new student*[grup.kol_vo_stud];
			for (int i = 0; i < kol_vo_stud; i++)
			{
				arr[i] = grup.arr[i]; 
			}
		}
		this->name_group = grup.name_group ;
		this->nomer_kursa = grup.nomer_kursa;
		this->specializaciya = grup.specializaciya;
	}
	student  & operator[](int index)
	{
		return *arr[index];
	}
	
	student & operator+(const group & gr)
	{
		kol_vo_stud = gr.kol_vo_stud + this->kol_vo_stud;
		student** temp = new student*[kol_vo_stud];
		int i;
		for (i = 0; i < this->kol_vo_stud; i++)
		{
			temp[i] = this->arr[i];
		}
		for (; i < gr.kol_vo_stud; i++)
		{
			temp[i] = gr.arr[i];
		}
		return **temp;
	}
	student & operator = (group & gr)
	{
		if (arr)
			delete[] arr;
		arr = nullptr;
		kol_vo_stud = gr.kol_vo_stud;

		arr = new student*[kol_vo_stud];
		for (int i = 0; i<kol_vo_stud; ++i)
				arr[i] = gr.arr[i];
		
		return **arr;
	}
	void set_name_group(char* nam)
	{
		strcpy_s(name_group, strlen(nam) + 1, nam);
	}
	void set_nomer_gruppi(int nam)
	{
		nomer_kursa = nam;
	}
	void set_specialization(char* nam)
	{
		strcpy_s(specializaciya, strlen(nam) + 1, nam);
	}
	void set_cpec(char* cpec)
	{
		strcpy_s(specializaciya, strlen(cpec) + 1, cpec);
	}
	void add_stud(char* nam, char* fam, char* sec_name)
	{
		
		student** temp = new student*[kol_vo_stud+1];
		for (int i = 0; i < kol_vo_stud; i++)
		{
			temp[i] = this->arr[i];
		}
		temp[kol_vo_stud] = new student;
		temp[kol_vo_stud]->set_family(fam);
		temp[kol_vo_stud]->set_first_name(nam);
		temp[kol_vo_stud]->set_second_name(sec_name);
		kol_vo_stud++;
		arr = temp;
	}
	void otchislit()
	{
		// удаляет всех студентов у которых общая  оценка по зачетам меньше 10
		for (int i = 0; i < kol_vo_stud; i++)
		{
			if (arr[i]->get_zachet() < 10)
				arr[i]->set_stat("Отчислен");			
		}
	}
	void sort()
	{
		for (int i = 0; i<kol_vo_stud; ++i)
		{
			for (int j = 0; j<kol_vo_stud - 1 - i; ++j)
			{
				if (strcmp(arr[j + 1]->get_family(), arr[j]->get_family()) < 0)
					swap(arr[j + 1], arr[j]);
			}
		}
	}
	void print()
	{
		group::sort();
		cout << "Группа \t\t\t" << name_group << endl;
		cout << "Кол-во студентов \t" << kol_vo_stud << endl;
		cout << "Номер курса \t\t" << nomer_kursa << endl;
		cout << "Специализация \t\t" << specializaciya << endl;
		if (kol_vo_stud > 0)
		{
			for (int i = 0; i < kol_vo_stud; i++)
			{
				cout << "----------- Студент № " << i+1 ;
				arr[i]->print();
			}
		}
	}
	~group()
	{
		if (arr)
		{
			for (int i = 0; i < kol_vo_stud; i++)
				delete[]  arr[i];
		}
		delete[]arr;
		delete[]specializaciya;
		delete[]name_group;
	}
};
void main()
{
	srand(time(NULL));
	setlocale(0, "");
	
	
	student a;
	//a.print();
	//student b("Vasya", "Ivanov", "Ivanovich");
	//b.print();
	//student c("Vasya", "Ivanov", "Ivanovich", "01.01.1950", "098-586-68-98", "Deribasovskaya");
	//c.print();

	
	// оценки принимаем через массив
	int kol = 5;
	int* ocenki = new int[kol];
	for (int i = 0; i < kol; i++)
		ocenki[i] = rand() % 12;
	
	cout <<  endl;
	a.add_zachet(ocenki, kol);
	delete[]ocenki;

	a.print();
	//c.add_ekzamen(5);
	//c.add_kursovoy(7);
	//c.print();
	//c.set_family("Petrovkin");
	//c.set_first_name("Chijik");
	//c.print();
	//c.set_ardess("Dunaevskogo 156");
	//c.print();

	//cout << c.get_ardess() << endl;
	//cout << c.get_date() << endl;
	//cout << c.get_family() << endl;
	//cout << c.get_first_name()  << endl;
	//cout << c.get_second_name() << endl;
	

	/*
	group ag(2);
	//ag.print();
	group bg(ag);
	//bg.print();
	bg.print();
	bg.add_stud("Petya", "Ivanov", "Viktorovich");
	bg.print();
	cout << bg[1].get_family() << endl;
	bg[1].set_family("Петров");
	cout << bg[1].get_family() << endl;
	ag = bg;
	ag.print();
	*/

	//group a1(7);
	//a1.print();
	//a1[1].set_stat("Отчислен");
	//a1.otchislit();
	//a1.print();


	adress_c a_a("Одесса", "Бочарова", 13, 21);
	a_a.print();
	
	
	
}
