#include <iostream>
#include "time.h"
#include <conio.h>
#include <algorithm>
#include <functional>
#include <iostream>


using namespace std;

#include "iostream"

using namespace std;

template <class T>
class container
{
protected:
	int count;
	void GetCount(int val)	{ count++; }
	void Add(int val){ count = val; }
	void Remove(int val){ count--; }
	void Print(){ cout << "Kol-vo - " << count; }
public:

};

template <class T>
class vector : public container<T>
{
	int *arr;
	int capacity;
	int size;
public:
	vector()
	{
		count = 0;
		size = 0;
		capacity = 10;
		arr = new int[capacity];
	}
	vector(int capacity) : vector()	{		this->capacity = capacity;	}
	vector(const vector & vec)
	{
		arr = nullptr;
		capacity = vec.capacity;
		size = vec.size;
		if (vec.arr)
		{
			arr = new int[capacity];
			for (int i = 0; i<size; i++)
				arr[i] = vec.arr[i];
		}
	}
	~vector()
	{
		if (arr)
			delete[] arr;
	}
	vector & operator+=(const vector & vec)
	{
		*this = *this + vec;
		return *this;
	}
	vector & operator=(const vector & vec)
	{

		if (this == &vec)
			return *this;
		if (arr)
			delete[] arr;
		arr = nullptr;
		capacity = vec.capacity;
		size = vec.size;
		if (vec.arr)
		{
			arr = new int[capacity];
			for (int i = 0; i<size; i++)
				arr[i] = vec.arr[i];
		}
		return *this;
	}
	vector operator+(const int & vec)
	{
		vector temp;
		temp.capacity = capacity + 1;
		temp.size = size + 1;
		temp.arr = new int[temp.capacity];
		for (int i = 0; i<size; i++)
			temp.arr[i] = arr[i];
		temp.arr[size] = vec;
		return temp;
	}
	vector operator+(const vector & vec)
	{
		vector temp;
		temp.capacity = capacity + vec.capacity;
		temp.size = size + vec.size;
		if (!temp.capacity)
			return temp;
		temp.arr = new int[temp.capacity];
		for (int i = 0; i<size; i++)
			temp.arr[i] = arr[i];
		for (int i = 0; i<vec.size; i++)
			temp.arr[i + size] = vec.arr[i];
		return temp;
	}
	bool operator==(const vector & vec)
	{
		if (size != vec.size)
			return false;
		for (int i = 0; i < size; i++)
		{
			for (int j = 0; j < size; j++)
			{
				if (arr[i] == vec.arr[j])
					continue;
				else
					return false;
			}
		}
		return true;
	}
	void operator () (int capacity) { resize(capacity); }
	int operator [] (int index)
	{
		if (index >= size || index < 0)
			return -1;
		return arr[index];
	}

	void random_fill(int min, int max)	{ for (int i = 0; i < capacity; i++){ arr[i] = rand() % max + min; size++; } count = size; }
	void insert_el(int val, int pos)
	{
		if (pos<0 || pos>size)
			return;
		int* temp = new int[capacity + 1];
		for (int i = 0; i<pos; i++)
			temp[i] = arr[i];
		temp[pos] = val;
		for (int i = pos; i<size; i++)
			temp[i + 1] = arr[i];
		if (arr)
			delete[] arr;
		arr = temp;
		size++;
	}
	void delete_el(int pos)
	{
		if (pos<0 || pos >= size)
			return;
		if (size == 1)
		{
			delete[]arr;
			arr = nullptr;
			size = 0;
			return;
		}
		int* temp = new int[size - 1];
		for (int i = 0; i<pos; i++)
			temp[i] = arr[i];
		for (int i = pos + 1; i<size; i++)
			temp[i - 1] = arr[i];
		if (arr)
			delete[] arr;
		arr = temp;
		size--;

	}
	void resize(int val)
	{
		if (val < size)
		{
			size = val;
			this->capacity = size;
			return;
		}
		this->capacity = val;
	}
	void print()
	{
		for (int i = 0; i < size; i++)
			cout << arr[i] << endl ;
		cout << "Kol-vo: - " << count;
		cout << endl;
	}
	void add_End(int val)
	{
		count += val;
		if (capacity < size + 1)
			capacity *= 2;
		int* temp = new int[capacity];
		for (int i = 0; i<size; ++i)
			temp[i] = arr[i];
		temp[size] = val;
		if (arr)
			delete[] arr;
		arr = temp;
		size++;
	}
	void remove_end()
	{
		count--;
		if (capacity == 1)
		{
			delete[]arr;
			arr = nullptr;
			size = 0;
			return;
		}
		int* temp = new int[capacity];
		for (int i = 0; i < size - 1; i++)
			temp[i] = arr[i];
		if (arr)
			delete[] arr;
		arr = temp;
		size--;
	}
	void clear()
	{
		count = 0;
		for (int i = 0; i < capacity; i++)
			arr[i] = 0;
	}
	void reverse()
	{
		int i = 0;
		int j = size - 1;
		while (i < j)
		{
			swap(arr[i], arr[j]);
			i++;j--;
		}
	}
	void sort(int left, int right)
	{
		int l = left;
		int r = right;
		int temp, mid;
		mid = arr[l + (r - l) / 2];
		while (l <= r)
		{
			while (arr[l] < mid) l++;
			while (arr[r] > mid) r--;
			if (l <= r) {
				swap(arr[l], arr[r]);
				l++; r--;
			}
		}
		if (l < right)
			this->sort(l, right);
		if (left<r)
			this->sort(left, r);
	}
	void shuffle(){		random_shuffle(begin(), end());	}
	void sort()
	{
		for (int i = 0; i<size; i++)
			for (int j = 0; j < size - 1 - i; j++)
				if (arr[j + 1] < arr[j]){ swap(arr[j + 1], arr[j]); }
	}
	int* begin()	{ return arr; }
	int* end()	{ return arr + size; }
	int index_of(int val)
	{
		for (int i = 0; i < size; i++)
		{
			if (arr[i] == val)
				return i;
			else
				return -1;
		}
	}
	int last_index_of(int val)
	{
		for (int i = size - 1; i >= 0; i++)
		{
			if (arr[i] == val)
				return i;
		}
	}
	int get_size() const { return size; }
	int get_capacity() const { return capacity; }	
};


void main()
{
	vector<int> a;
	a.random_fill(0, 20);
	a.print();
}
